{
  // Place your rn-fwk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "useForm": {
    "scope": "typescriptreact",
    "prefix": "appUseForm",
    "body": [
      "const {",
      "  control,",
      "  formState: { errors },",
      "  setValue,",
      "  handleSubmit,",
      "} = useForm${0}<${1:{ name: string, age: number, checkbox: boolean, options: InputSelectAppOptionProps, date: Date }}>({",
      "  defaultValues: {",
      "    ${2:name: \"\", age: 18, checkbox: false, options: null, date: new Date(), }",
      "  },",
      "});",
      "",
      "const onSubmitSucess = (data: ${1:{ name: string, age: number, options: InputSelectAppOptionProps, date: Date }}) => {",
      "  console.log({ data });",
      "};",
    ],
    "description": "config useForm",
  },
  "FormSubmit": {
    "scope": "typescriptreact",
    "prefix": "appFormSubmit",
    "body": [
      "<ButtonApp${0} label={\"${1:Guardar}\"} onPress={handleSubmit(onSubmitSucess)} />",
    ],
    "description": "Add form submit button",
  },
  "InputTextApp": {
    "scope": "typescriptreact",
    "prefix": "appInputTextApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:name}\",",
      "    rules: { required: \"The input is required\" },",
      "  }}",
      "  label={\"${2:Nombre}\"}",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:name}?.message}",
      "  clearInput={() => setValue(\"${1:name}\", \"\")}",
      "/>",
    ],
    "description": "Add InputTextApp component",
  },
  "InputNumberApp": {
    "scope": "typescriptreact",
    "prefix": "appInputNumberApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:index}\",",
      "    rules: { required: \"The input is required\" },",
      "  }}",
      "  textInput={{",
      "    keyboardType: \"numeric\",",
      "  }}",
      "  label={\"${2:Índice}\"}",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:index}?.message}",
      "  clearInput={() => setValue(\"${1:index}\", 0)}",
      "/>",
    ],
    "description": "Add InputTextApp for number inputs",
  },
  "InputEmailApp": {
    "scope": "typescriptreact",
    "prefix": "appInputEmailApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:email}\",",
      "    rules: {",
      "      required: \"The input is required\",",
      "      pattern: {",
      "        value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,",
      "        message: \"Invalid email address\",",
      "      },",
      "    },",
      "  }}",
      "  textInput={{",
      "    keyboardType: \"email-address\",",
      "  }}",
      "  label={\"${2:Mail}\"}",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:email}?.message}",
      "  clearInput={() => setValue(\"${1:email}\", \"\")}",
      "/>",
    ],
    "description": "Add InputTextApp for number inputs",
  },
  "InputPasswordApp": {
    "scope": "typescriptreact",
    "prefix": "appInputPasswordApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:password}\",",
      "    rules: {required: \"The input is required\"},",
      "  }}",
      "  textInput={{",
      "    secureTextEntry: true,",
      "  }}",
      "  label={\"${2:Contraseña}\"}",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:password}?.message}",
      "  clearInput={() => setValue(\"${1:password}\", \"\")}",
      "/>",
    ],
    "description": "Add InputTextApp for password inputs",
  },
  "InputSelectApp": {
    "scope": "typescriptreact",
    "prefix": "appInputSelectApp",
    "body": [
      "<InputSelectApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:options}\",",
      "    rules: { required: \"The input field is required\" },",
      "  }}",
      "  label={\"${2:Opciones}\"}",
      "  error={errors.${1:options}?.message}",
      "  containerStyle={{ minWidth: 250 }}",
      "  clearInput={() => setValue(\"${1:option}\", null)}",
      "  options={[",
      "    { label: \"${3:Opción} 1\", value: \"${1:option}1\" },",
      "    { label: \"${3:Opción} 2\", value: \"${1:option}2\" },",
      "    { label: \"${3:Opción} 3\", value: \"${1:option}3\" },",
      "  ]}",
      "/>",
    ],
    "description": "Add InputSelectApp component",
  },
  "InputDateApp": {
    "scope": "typescriptreact",
    "prefix": "appInputDateApp",
    "body": [
      "<InputDateApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:date}\",",
      "    rules: { required: \"The input field is required\" },",
      "  }}",
      "  label={\"${2:Fecha}\"}",
      "  error={errors.${1:date}?.message}",
      "  containerStyle={{ minWidth: 250 }}",
      "  clearInput={() => setValue(\"${1:date}\", null)}",
      "/>",
    ],
    "description": "Add InputDateApp component",
  },
  "InputCheckboxApp": {
    "scope": "typescriptreact",
    "prefix": "appInputCheckboxApp",
    "body": [
      "<InputCheckboxApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:checkbox}\",",
      "    rules: {",
      "      validate: value => value === true || \"The checkbox is required\",",
      "    },",
      "  }}",
      "  label={\"${2:Normal Checkbox}\"}",
      "  error={errors.${1:checkbox}?.message}",
      "/>",
    ],
    "description": "Add InputDateApp component",
  },
  "InputRadioButtonApp": {
    "scope": "typescriptreact",
    "prefix": "appInputRadioButtonApp",
    "body": [
      "<InputRadioButtonApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:options}\",",
      "    rules: { required: \"The input field is required\" },",
      "  }}",
      "  label={\"${2:Opciones}\"}",
      "  error={errors.${1:options}?.message}",
      "  containerStyle={{ minWidth: 250 }}",
      "  options={[",
      "    { label: \"${2:Opciones} 1\", value: \"${1:options}1\" },",
      "    { label: \"${2:Opciones} 2\", value: \"${1:options}2\" },",
      "    { label: \"${2:Opciones} 3\", value: \"${1:options}3\" },",
      "  ]}",
      "/>",
    ],
    "description": "Add InputRadioButtonApp component",
  },
}
