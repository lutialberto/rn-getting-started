{
  // Place your rn-fwk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "useForm": {
    "scope": "typescriptreact",
    "prefix": "appUseForm",
    "body": [
      "const {",
      "  control,",
      "  formState: { errors },",
      "  setValue,",
      "  resetField,",
      "  handleSubmit,",
      "} = useForm${0}<${1:FormCustomData}>({",
      "  defaultValues: {",
      "    // HINT: define los valores por defecto del formulario ${1:FormCustomData} aquí",
      "  },",
      "});",
      "",
      "const onSubmitSucess = (data: ${1:FormCustomData}) => {",
      "  console.log({ data });",
      "};",
    ],
    "description": "config useForm",
  },
  "FormExample": {
    "scope": "typescriptreact",
    "prefix": "appFormExample",
    "body": [
      "import { StyleSheet } from \"react-native\";",
      "import { ViewThemed } from \"@/components/containers/ViewThemed\";",
      "import { useForm } from \"react-hook-form\";",
      "import { InputSelectAppOptionProps } from \"@/components/forms/inputSelect/InputSelectAppProps\";",
      "import { TextApp } from \"@/components/texts/TextApp\";",
      "",
      "export type Form${1:Example}Data = {",
      "  // HINT: define los campos del formulario aquí",
      "  ${0}",
      "};",
      "",
      "export default function Form${1:Example}() {",
      "  // HINT: si necesitas agregar los inputs y/o botons dentro del jsx, utiliza los snippets de tipo appForm...",
      "  const {",
      "    control,",
      "    formState: { errors },",
      "    setValue,",
      "    resetField,",
      "    handleSubmit,",
      "  } = useForm<Form${1:Example}Data>({",
      "    defaultValues: {",
      "      // HINT: define los valores por defecto del formulario aquí",
      "    },",
      "  });",
      "",
      "  const onSubmitSucess = (data: Form${1:Example}Data) => {",
      "    //HINT: para ver los datos del formulario",
      "    console.log({ data });",
      "  };",
      "",
      "  return (",
      "    <>",
      "      {/* TEMPORAL: el texto a continuación es solo para visualizar donde arranca el formulario */}",
      "      <TextApp>Form${1:Example}Data</TextApp>",
      "      <ViewThemed style={styles.container}>",
      "        {/* HINT: utiliza los snippets que correspondan y borra los que no necesites */}",
      "        {/* appInputTextApp */}",
      "        {/* appInputNumberApp */}",
      "        {/* appInputCheckboxApp */}",
      "        {/* appInputSelectApp */}",
      "        {/* appInputDateApp */}",
      "        {/* appInputEmailApp */}",
      "        {/* appInputPasswordApp */}",
      "        {/* appInputRadioButtonApp */}",
      "",
      "        {/* HINT: utiliza el snippet para validar el formulario y manejar success y error submit */}",
      "        {/* appFormSubmit */}",
      "      </ViewThemed>",
      "    </>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    width: \"100%\",",
      "    gap: 10,",
      "    //DEBUG: para ver hasta donde llega el formulario",
      "    borderColor: 'red',borderWidth: 1,",
      "  },",
      "});",
    ],
    "description": "generate a form example",
  },
  "FormSubmit": {
    "scope": "typescriptreact",
    "prefix": "appFormSubmit",
    "body": [
      "<ButtonApp${0} label={\"${1:Guardar}\"} onPress={handleSubmit(onSubmitSucess)} />",
    ],
    "description": "Add form submit button",
  },
  "InputTextApp": {
    "scope": "typescriptreact",
    "prefix": "appInputTextApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:name}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: { required: \"The input is required\" },",
      "  }}",
      "  label={\"${2:Nombre}\"}",
      "  // HINT: sobreescribe los estilos del input: margin, padding, width, flex, etc.",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:name}?.message}",
      "  clearInput={() => resetField(\"${1:name}\")}",
      "/>",
    ],
    "description": "Add InputTextApp component",
  },
  "InputNumberApp": {
    "scope": "typescriptreact",
    "prefix": "appInputNumberApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:index}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: { required: \"The input is required\" },",
      "  }}",
      "  textInput={{",
      "    keyboardType: \"numeric\",",
      "  }}",
      "  label={\"${2:Índice}\"}",
      "  // HINT: sobreescribe los estilos del input: margin, padding, width, flex, etc.",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:index}?.message}",
      "  clearInput={() => resetField(\"${1:index}\")}",
      "/>",
    ],
    "description": "Add InputTextApp for number inputs",
  },
  "InputEmailApp": {
    "scope": "typescriptreact",
    "prefix": "appInputEmailApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:email}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: {",
      "      required: \"The input is required\",",
      "      pattern: {",
      "        value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,",
      "        message: \"Invalid email address\",",
      "      },",
      "    },",
      "  }}",
      "  textInput={{",
      "    keyboardType: \"email-address\",",
      "  }}",
      "  label={\"${2:Mail}\"}",
      "  // HINT: sobreescribe los estilos del input: margin, padding, width, flex, etc.",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:email}?.message}",
      "  clearInput={() => resetField(\"${1:email}\")}",
      "/>",
    ],
    "description": "Add InputTextApp for number inputs",
  },
  "InputPasswordApp": {
    "scope": "typescriptreact",
    "prefix": "appInputPasswordApp",
    "body": [
      "<InputTextApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:password}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: {required: \"The input is required\"},",
      "  }}",
      "  textInput={{",
      "    secureTextEntry: true,",
      "  }}",
      "  label={\"${2:Contraseña}\"}",
      "  // HINT: sobreescribe los estilos del input: margin, padding, width, flex, etc.",
      "  containerStyle={{ minWidth: 250 }}",
      "  error={errors.${1:password}?.message}",
      "  clearInput={() => resetField(\"${1:password}\")}",
      "/>",
    ],
    "description": "Add InputTextApp for password inputs",
  },
  "InputSelectApp": {
    "scope": "typescriptreact",
    "prefix": "appInputSelectApp",
    "body": [
      "<InputSelectApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:options}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: { required: \"The input field is required\" },",
      "  }}",
      "  label={\"${2:Opciones}\"}",
      "  error={errors.${1:options}?.message}",
      "  // HINT: sobreescribe los estilos del input: margin, padding, width, flex, etc.",
      "  containerStyle={{ minWidth: 250 }}",
      "  clearInput={() => resetField(\"${1:option}\")}",
      "  options={[",
      "    // HINT: define las opciones del select aquí o importa un array de opciones",
      "    { label: \"${3:Opción} 1\", value: \"${1:option}1\" },",
      "    { label: \"${3:Opción} 2\", value: \"${1:option}2\" },",
      "    { label: \"${3:Opción} 3\", value: \"${1:option}3\" },",
      "  ]}",
      "/>",
    ],
    "description": "Add InputSelectApp component",
  },
  "InputDateApp": {
    "scope": "typescriptreact",
    "prefix": "appInputDateApp",
    "body": [
      "<InputDateApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:date}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: { required: \"The input field is required\" },",
      "  }}",
      "  label={\"${2:Fecha}\"}",
      "  error={errors.${1:date}?.message}",
      "  // HINT: sobreescribe los estilos del input: margin, padding, width, flex, etc.",
      "  containerStyle={{ minWidth: 250 }}",
      "  clearInput={() => resetField(\"${1:date}\")}",
      "/>",
    ],
    "description": "Add InputDateApp component",
  },
  "InputCheckboxApp": {
    "scope": "typescriptreact",
    "prefix": "appInputCheckboxApp",
    "body": [
      "<InputCheckboxApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:checkbox}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: {",
      "      validate: value => value === true || \"The checkbox is required\",",
      "    },",
      "  }}",
      "  label={\"${2:Normal Checkbox}\"}",
      "  error={errors.${1:checkbox}?.message}",
      "/>",
    ],
    "description": "Add InputDateApp component",
  },
  "InputRadioButtonApp": {
    "scope": "typescriptreact",
    "prefix": "appInputRadioButtonApp",
    "body": [
      "<InputRadioButtonApp${0}",
      "  formControl={{",
      "    control,",
      "    name: \"${1:options}\",",
      "    // HINT: define las reglas de validación del input",
      "    rules: { required: \"The input field is required\" },",
      "  }}",
      "  label={\"${2:Opciones}\"}",
      "  error={errors.${1:options}?.message}",
      "  // HINT: sobreescribe los estilos del input: margin, padding, width, flex, etc.",
      "  containerStyle={{ minWidth: 250 }}",
      "  options={[",
      "    // HINT: define las opciones del select aquí o importa un array de opciones",
      "    { label: \"${2:Opciones} 1\", value: \"${1:options}1\" },",
      "    { label: \"${2:Opciones} 2\", value: \"${1:options}2\" },",
      "    { label: \"${2:Opciones} 3\", value: \"${1:options}3\" },",
      "  ]}",
      "/>",
    ],
    "description": "Add InputRadioButtonApp component",
  },
}
