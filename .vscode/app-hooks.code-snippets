{
  // Place your rn-fwk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "ThemeHook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookTheme",
    "body": [
      "const colors = useThemeColor$1();",
      "const styles = getStyles(colors);",
    ],
    "description": "Use theme hook",
  },
  "GetStyles": {
    "scope": "typescript,typescriptreact",
    "prefix": "getStyles",
    "body": [
      "const getStyles = (colors:ColorsProps$1) => StyleSheet$2.create({",
      "  ${3:name}: {",
      "    ${4:prop}: ${5:value},",
      "  }",
      "});",
    ],
    "description": "Get styles",
  },
  "TextStylesHook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookTextStyles",
    "body": ["const { textStyles, colors } = useTextStyles$0();"],
    "description": "Use text styles hook",
  },
  "ToastHook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookToast",
    "body": ["const { showToast } = useToastApp$0();"],
    "description": "Use toast hook",
  },
  "CustomStore": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookCustomStore",
    "body": [
      "import {create} from 'zustand';",
      "",
      "type Base${1:Custom}Store = {",
      "  data: CustomData;",
      "  reset: () => void;",
      "  //HINT: define las acciones que necesites para actualizar el store",
      "  //login: (data: any) => void;",
      "};",
      "",
      "type CustomData = {",
      "  //HINT: define la estructura de los datos que vas a almacenar",
      "  $0",
      "};",
      "",
      "const INITIAL_CUSTOM_DATA: Base${1:Custom}Store['data'] = {",
      "  //HINT: inicializa los datos del store",
      "};",
      "",
      "const useDataImpl = create<Base${1:Custom}Store>()(",
      "    set => ({",
      "      data: INITIAL_CUSTOM_DATA,",
      "      reset: () => set(() => ({ data: INITIAL_CUSTOM_DATA })),",
      "      //HINT: implementa las acciones que necesites",
      "      //login: (data: any) =>",
      "      //  set(() => ({",
      "      //    data,",
      "      //  })),",
      "    }),",
      ");",
      "",
      "export default useDataImpl as {",
      "  (): Base${1:Custom}Store;",
      "  <T>(selector: (s: Base${1:Custom}Store) => T): T;",
      "};",
    ],
    "description": "Create a custom store hook",
  },
}
